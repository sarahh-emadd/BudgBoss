// Mocks generated by Mockito 5.4.6 from annotations
// in budget_boss_new/test/firebase_expense_service_test.mock_generator.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:budget_boss_new/data/expense_data.dart' as _i5;
import 'package:budget_boss_new/data/services/firebase_expense_service.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [FirebaseExpenseService].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseExpenseService extends _i1.Mock
    implements _i2.FirebaseExpenseService {
  MockFirebaseExpenseService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get uid =>
      (super.noSuchMethod(
            Invocation.getter(#uid),
            returnValue: _i3.dummyValue<String>(this, Invocation.getter(#uid)),
          )
          as String);

  @override
  _i4.Future<void> addExpense({
    required double? amount,
    required String? category,
    required String? description,
    required DateTime? date,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#addExpense, [], {
              #amount: amount,
              #category: category,
              #description: description,
              #date: date,
            }),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> deleteExpense(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteExpense, [id]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> updateExpense({
    required String? id,
    required String? title,
    required double? amount,
    required String? category,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#updateExpense, [], {
              #id: id,
              #title: title,
              #amount: amount,
              #category: category,
            }),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<List<_i5.Expense>> getExpenses() =>
      (super.noSuchMethod(
            Invocation.method(#getExpenses, []),
            returnValue: _i4.Future<List<_i5.Expense>>.value(<_i5.Expense>[]),
          )
          as _i4.Future<List<_i5.Expense>>);
}
